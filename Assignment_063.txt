 List all the columns of the Salespeople table.

Desc salespeople;

 2. List all customers with a rating of 100.
Select * from customers where rating=100;

 3. Find all records in the Customer table with NULL values in the city column.

Select * from customers where city is null;



 4. Find the largest order taken by each salesperson on each date.


Select  sname,odate,max(amt) highest_order
From salespeople s , orders o
Where s.snum=o.snum
Group by sname, odate;




 5. Arrange the Orders table by descending customer number.
Select * from orders order by cnum desc;

 6. Find which salespeople currently have orders in the Orders table. 


Select sname from salespeople
Where snum in(select snum from orders);


Select distinct s.snum from salespeople s, orders o 
Where s.snum=o.snum;



7. List names of all customers matched with the salespeople serving them.

Select  cname,sname
From customers c , salespeople s
Where c.snum=s.snum;


 8. Find the names and numbers of all salespeople who had more than one customer. 


Select sname,s.snum,count(distinct cnum) cust_count
From customers c , salespeople s
Where c.snum=s.snum
Group by sname,s.snum
Having count(distinct cnum)>1;

9. Count the orders of each of the salespeople and output the results in descending order. 

Select sname,count(onum) o_count
From salespeople s left join orders o
On  s.snum=o.snum
Group by sname
Order by 2 desc;


10. List the Customer table if and only if one or more of the customers in the Customer table are located in San Jose. 


Select * from customers where
Exists (select 1 from customers where city='San Jose');



11. Match salespeople to customers according to what city they lived in. 

Select sname,cname,s.city
From salespeople s, customers c
Where c.snum=s.snum
And s.city=c.city;

12. Find the largest order taken by each salesperson.

Select  sname,max(amt) highest_order
From salespeople s , orders o
Where s.snum=o.snum
Group by sname;

 13. Find customers in San Jose who have a rating above 200.

Select * from customers where rating>200 and city='San Jose';

 14. List the names and commissions of all salespeople in London.

Select sname,comm
From salespeople
Where city='London'; 


 15. List all the orders of salesperson Motika from the Orders table.  


Select sname,onum,odate,amt From orders o  left join salespeople s
On s.snum=o.snum
where sname='Motika';







16. Find all customers with orders on October 3. 

Select distinct cname
From customers c,orders o
Where c.cnum=o.cnum
And odate='1996-10-03';

17. Give the sums of the amounts from the Orders table, grouped by date, eliminating all those 
dates where the SUM was not at least 2000.00 above the MAX amount. 


Select odate,sum(amt) from orders
Group by odate
Having sum(amt)>2000+max(amt);


18. Select all orders that had amounts that were greater than at least one of the orders from 
October 6. 

Select * from orders where amt>any
(Select amt from orders where odate='1996-10-06');


Select * from orders where amt>
(Select min(amt) from orders where odate='1996-10-06');

19. Write a query that uses the EXISTS operator to extract all salespeople who have customers 
with a rating of 300. 


Select * from salespeople s
Where exists(select 1
From customers c where c.snum=s.snum and rating=300);

20. Find all pairs of customers having the same rating. 

Select c1.cname c1,c2.cname c2,c1.rating
From
Customers c1 , customers c2
Where c1.cname<c2.cname
And c1.rating=c2.rating;


21. Find all customers whose CNUM is 1000 above the SNUM of Serres. 

Select * from customers where cnum>
(Select snum from salespeople where sname='Serres')+1000;


Select * from customers where cnum>
(Select snum+1000 from salespeople where sname='Serres');


22. Give the salespeople’s commissions as percentages instead of decimal numbers. 


Select snum,sname,concat(round(comm*100,2),'%') comm_percent from salespeople;

23. Find the largest order taken by each salesperson on each date, eliminating those MAX orders 
which are less than $3000.00 in value.


Select  sname,odate,max(amt) highest_order
From salespeople s , orders o
Where s.snum=o.snum
Group by sname, odate
Having max(amt)>=3000;

 
24. List the largest orders for October 3, for each salesperson. 


Select  sname,max(amt) highest_order
From salespeople s , orders o
Where s.snum=o.snum and odate='1996-10-03'
Group by sname;


25. Find all customers located in cities where Serres (SNUM 1002) has customers. 

Select * from customers where city in(Select c.city from salespeople s, customers c
Where s.snum=c.snum
And sname='Serres');


26. Select all customers with a rating above 200.00.

Select * from customers where rating>200;

27. Count the number of salespeople currently listing orders in the Orders table. 

Select count(distinct snum) from orders;

28. Write a query that produces all customers serviced by salespeople 
with a commission above 12%. Output the customer’s name and the salesperson’s rate of commission. 

Select cname,comm
From customers c , salespeople s
Where c.snum=s.snum and comm>0.12;

29. Find salespeople who have multiple customers. 

Select sname,count(cnum)
From salespeople s ,customers c
Where s.snum=c.snum
Group by sname
Having count(cnum)>1;


30. Find salespeople with customers located in their city. 

Select sname,cname,s.city
From salespeople s, customers c
Where c.snum=s.snum
And s.city=c.city;

31. Find all salespeople whose name starts with ‘P’ and the fourth character is ‘l’. 

Select * from salespeople where sname like 'P__l%';

32. Write a query that uses a subquery to obtain all orders for the customer named Cisneros. 
Assume you do not know his customer number. 


Select odate,onum,amt
From orders
Where cnum=(select cnum from customers where 
cname='Cisneros');


Select 'Cisneros' cname,odate,onum,amt
From orders
Where cnum=(select cnum from customers where 
cname='Cisneros');



33. Find the largest orders for Serres and Rifkin. 


Select  sname,max(amt) highest_order
From salespeople s , orders o
Where s.snum=o.snum and sname in ('Serres','Rifkin')
Group by sname;


34. Extract the Salespeople table in the following order : SNUM, SNAME, COMMISSION, CITY. 

Select SNUM, SNAME, COMM, CITY
From salespeople;

35. Select all customers whose names fall in between ‘A’ and ‘G’ alphabetical range. 

Select * from customers where left(cname,1)
Between 'a' and 'g';

Select * from customers where
Cname between 'a' and 'h' and cname !='H'; 


36. Select all the possible combinations of customers that you can assign. 
Select c1.cname c1,c2.cname c2,c1.rating
From
Customers c1 , customers c2
Where c1.cname<c2.cname;


37. Select all orders that are greater than the average for October 4. 

Select * from orders where amt>
(Select avg(amt) from orders
Where odate='1996-10-04');


38. Write a select command using a corelated subquery that selects the names and numbers of all 
customers with ratings equal to the maximum for their city. 


Select cname,cnum 
From customers co
Where exists(select 1 from customers ci
Where co.city=ci.city
Group  by  ci.city
Having max(ci.rating)=co.rating);

39. Write a query that totals the orders for each day and places the results in descending order.

Select odate,sum(amt)
From orders 
Group by odate
Order by 2 desc;
 
40. Write a select command that produces the rating followed by the name of each customer in 
San Jose. 

Select rating,cname from customers where city='San Jose';

41. Find all orders with amounts smaller than any amount for a customer in San Jose. 

Select * from orders where amt
<any(select amt from orders o , customers c
Where o.cnum=c.cnum and city='San Jose');


42. Find all orders with above average amounts for their customers. 
Select avg (amt) from Orders
Select * from Orders 
Where Amt>(Select avg (amt) from Orders);

43. Write a query that selects the highest rating in each city. 

 Select  city,max(rating) from customers group by city; 
44. Write a query that calculates the amount of the salesperson’s commission on each order by a 
customer with a rating above 100.00.
Select sname,sum(amt*comm) total_comm
 from orders o,salespeople s , customers c
Where o.snum=s.snum
And
o.cnum=c.cnum
And
c.snum=s.snum
       And rating>100
Group by sname;


Select sname,sum(amt*comm) total_comm
 from orders o join salespeople s
On o.snum=s.snum
 join customers c
on
o.cnum=c.cnum
And
c.snum=s.snum
where rating>100
Group by sname;

45. Count the customers with ratings above San Jose’s average. 
select count(CNUM) from customers where rating>(
 select avg(rating) from customers where city='San jose');

46. Write a query that produces all pairs of salespeople with themselves as well as duplicate rows 
with the order reversed. 

Select s1.sname s1,s2.sname s2
From salespeople s1, salespeople s2;

47. Find all salespeople that are located in either Barcelona or London. 
select * from salespeople where city in ('Barcelona','London');



48. Find all salespeople with only one customer. 


select sname,count(cnum)
from salespeople s , customers c
where s.snum=c.snum
group by sname
having count(cnum)=1;

49. Write a query that joins the Customer table to itself to find all pairs of customers served by a 
single salesperson. 


Select c1.cname,c2.cname
From customers c1,customers c2
Where c1.cnum<c2.cnum
And c1.snum=c2.snum;



50. Write a query that will give you all orders for more than $1000.00 


Select * from orders where amt>1000;




51. Write a query that lists each order number followed by the name 
of the customer who made 
that order. 

select onum,cname from
orders o ,customers c
where o.cnum=c.cnum;



52. Write 2 queries that select all salespeople (by name and number) who have 
customers in their 
cities who they do not service, one using a join and one a corelated subquery. Which solution 
is more elegant? 

-- join is better
select distinct s.sname,s.snum,s.city
from salespeople s , customers c
where s.snum<>c.snum
and s.city=c.city;






select s.sname,s.snum,s.city
from salespeople s 
where exists(select 1 from customers c
where s.snum<>c.snum
and s.city=c.city);


53. Write a query that selects all customers whose ratings are equal to or 
greater than ANY (in the 
SQL sense) of Serres’? 



select * from customers where rating >=any(select rating from
salespeople s, customers c
where s.snum=c.snum
and sname='Serres');



54. Write 2 queries that will produce all orders taken on October 3 or October 4. 

select * from orders where odate in ('1996-10-03','1996-10-04');

select * from orders where odate = '1996-10-03' or odate='1996-10-04';



55. Write a query that produces all pairs of orders by a given customer.
 Name that customer and 
eliminate duplicates. 


select cname,o1.onum,o2.onum from orders o1 ,orders o2, customers c
where o1.cnum=o2.cnum
and o1.cnum=c.cnum
and o2.cnum=c.cnum
and o1.onum<o2.onum;


56. Find only those customers whose ratings are higher than every customer in Rome. 
Select * from customers where rating>all(
Select rating from customers where city='Rome');

Select * from customers where rating>(
Select max(rating) from customers where city='Rome');



57. Write a query on the Customers table whose output will exclude all customers with a rating <= 
100.00, unless they are located in Rome. 


Select * from customers where rating>100 or city='Rome';


58. Find all rows from the Customers table for which the salesperson number is 1001. 


Select * from customers where snum=1001;

59. Find the total amount in Orders for each salesperson for whom this total is greater than the 
amount of the largest order in the table. 


Select sname,sum(amt) from
Orders o , salespeople s
Where o.snum=s.snum
Group by sname
Having sum(amt)>(select max(amt) from orders);

60. Write a query that selects all orders save those with zeroes or NULLs in the amount field. 




61. Produce all combinations of salespeople and customer names such that the former precedes 
the latter alphabetically, and the latter has a rating of less than 200. 


Select sname,cname
From salespeople,customers
Where sname<cname and rating<200;



62. List all Salespeople’s names and the Commission they have earned. 


Select sname,case when sum(amt*comm) is null then 0 else  sum(amt*comm) end total_comm
From orders o right join salespeople s
On o.snum=s.snum
Group by sname;



63. Write a query that produces the names and cities of all customers with the same rating as 
Hoffman. Write the query using Hoffman’s CNUM rather than his rating, so that it would still be 
usable if his rating changed. 


Select cname,city from customers
Where rating=(select rating from customers where cname='Hoffman');




64. Find all salespeople for whom there are customers that follow them in alphabetical order. 

Select sname,cname 
From salespeople s , customers c
Where s.snum=c.snum
And sname<cname;


65. Write a query that produces the names and ratings of all customers of all who have above 
average orders. 



Select cname, rating from customers c, orders o 
Where c.cnum=o.cnum
And amt>(select avg(amt) from orders);


66. Find the SUM of all purchases from the Orders table. 
Select sum(amt) from orders;


67. Write a SELECT command that produces the order number, amount and date for all rows in 
the order table. 


Select onum,amt,odate from orders;

68. Count the number of nonNULL rating fields in the Customers table (including repeats). 
Select count(rating) from customers;
69. Write a query that gives the names of both the salesperson and the customer for each order 
after the order number. 

Select onum,sname,cname 
From
Orders o , customers c , salespeople s
Where o.snum=s.snum
And o.cnum=c.cnum
And c.snum=s.snum;

70. List the commissions of all salespeople servicing customers in London. 



Select sname,case when sum(amt*comm) is null then 0 else  sum(amt*comm) end total_comm
From orders o, salespeople s, customers c
Where o.snum=s.snum
And o.cnum=c.cnum
And c.snum=s.snum
And c.city='London'
Group by sname;




71. Write a query using ANY or ALL that will find all salespeople who have no customers located in 
their city. 



Select * from salespeople s
Where city!=all(select city from customers c where c.snum=s.snum);


72. Write a query using the EXISTS operator that selects all salespeople with customers located in 
their cities who are not assigned to them. 

Select *  
From salespeople s
Where exists (select 1 from customers c 
Where c.city=s.city and c.snum<>s.snum);


73. Write a query that selects all customers serviced by Peel or Motika. (Hint : The SNUM field 
relates the two tables to one another.) 



Select cname,sname
From customers c , salespeople s
Where c.snum=s.snum
And sname in ('Peel','Motika');


74. Count the number of salespeople registering orders for each day. (If a salesperson has more 
than one order on a given day, he or she should be counted only once.) 

Select odate, count(distinct snum) from orders group by odate;


75. Find all orders attributed to salespeople in London. 

Select odate,onum,amt
From orders c , salespeople s
Where c.snum=s.snum
And city='London';



76. Find all orders by customers not located in the same cities as their salespeople. 


Select odate,onum,amt,cname
From orders o , salespeople s, customers c
Where c.snum=s.snum
And o.snum=s.snum
And o.cnum=c.cnum
And c.city<>s.city; 



77. Find all salespeople who have customers with more than one current order. 

Select * from salespeople
Where snum in
(select snum from customers
Where cnum in (select cnum from orders
Group by cnum having count(onum)>1));


78. Write a query that extracts from the Customers table every customer assigned to a 
salesperson who currently has at least one other customer (besides the customer being 
selected) with orders in the Orders table.

Select * from customers where snum in(Select snum from orders 
Group by snum
Having count(distinct cnum)>1); 

 
79. Write a query that selects all customers whose names begin with ‘C’. 

Select * from customers where cname like 'c%';

80. Write a query on the Customers table that will find the highest rating in each city. Put the output 
in this form : for the city (city) the highest rating is : (rating). 

Select concat( 'for the city ',city,' the highest rating is : ',max(rating) )
From customers
Group by city;


81. Write a query that will produce the SNUM values of all salespeople with orders currently in the 
Orders table (without any repeats). 




82. Write a query that lists customers in descending order of rating. Output the rating field first, 
followed by the customer’s names and numbers. 


83. Find the average commission for salespeople in London. 

84. Find all orders credited to the same salesperson who services Hoffman (CNUM 2001). 

85. Find all salespeople whose commission is in between 0.10 and 0.12 (both inclusive). 

86. Write a query that will give you the names and cities of all salespeople in London with a 
commission above 0.10. 

87. What will be the output from the following query? 
 SELECT * FROM ORDERS 
 where (amt < 1000 OR NOT (odate = '1996-10-03' AND cnum > 
2003)); 


88. Write a query that selects each customer’s smallest order. 


89. Write a query that selects the first customer in alphabetical order whose name begins with G. 
90. Write a query that counts the number of different nonNULL city values in the Customers table. 
91. Find the average amount from the Orders table. 
92. What would be the output from the following query? 
 SELECT * FROM ORDERS 
 WHERE NOT (odate = 10/03/96 OR snum > 1006) AND amt >= 
1500); 
93. Find all customers who are not located in San Jose and whose rating is above 200. 
94. Give a simpler way to write this query : 
 SELECT snum, sname city, comm FROM salespeople 
 WHERE (comm > + 0.12 OR comm < 0.14); 


 SELECT snum, sname city, comm FROM salespeople 
 WHERE (comm > + 0.12 OR comm < 0.14); 

 SELECT snum, sname city, comm FROM salespeople where comm is not null; 



95. Evaluate the following query : 
 SELECT * FROM orders 
 WHERE NOT ((odate = 10/03/96 AND snum > 1002) OR amt > 2000.00); 
96. Which salespersons attend to customers not in the city they have been assigned to? 
97. Which salespeople get commission greater than 0.11 are serving customers rated less than 
250? 
98. Which salespeople have been assigned to the same city but get different commission 
percentages? 

Select s1.sname,s2.sname,s1.comm,s2.comm,s1.city
From salespeople s1, salespeople s2
Where s1.city=s2.city
And
s1.comm<>s2.comm
And
s1.snum<s2.snum;

99. Which salesperson has earned the most by way of commission? 
100.Does the customer who has placed the maximum number of orders have the maximum rating? 
Select ord.cnum, case when ord.cnum=cust_rat.cnum then 'Yes' else 'No' end Result from (Select * from (Select cnum,rank() over(order by cust_order_count desc) rn from (Select cnum ,count(onum) cust_order_count from orders group by cnum) as t ) as t1
Where rn=1) ord left join
(select * from (select cnum,rating, rank() over (order by rating desc) rn from customers ) as c1 where rn=1) cust_rat
On ord.cnum=cust_rat.cnum
;
